package main

import (
	"testing"
)

const (
	LorumTestText = `Bacon ipsum dolor amet pork chop sunt swine, t-bone velit pastrami frankfurter adipisicing.
Elit sunt sirloin sed eu. Eu qui swine cillum filet mignon ut prosciutto dolore.
Deserunt reprehenderit pork, rump flank consequat magna consectetur. Mollit shoulder salami
reprehenderit. Boudin flank turkey biltong beef porchetta. Brisket t-bone eiusmod beef ribs
pig dolor ullamco spare ribs tail non strip steak shoulder sunt.
Leberkas venison culpa prosciutto beef reprehenderit dolore strip steak. Eu pork chop irure
drumstick in dolore. Commodo flank boudin, incididunt t-bone lorem sed strip steak eu.
Tri-tip do et voluptate. In magna exercitation beef turkey quis, ball tip pancetta laborum
nisi id. Meatloaf boudin porchetta sirloin brisket biltong aute adipisicing non turkey chuck tempor.
Tongue dolore ipsum occaecat jerky fatback salami shankle. Et in meatloaf excepteur tempor pork.
In jowl landjaeger short loin sed ut tail eiusmod elit strip steak ut ribeye duis ut. Short ribs
beef ribs laboris sed tongue ea pig prosciutto lorem salami bacon est. Ut elit ipsum, dolor ea
t-bone voluptate jowl chicken commodo jerky ex picanha esse. Dolore bacon andouille non irure
tail pariatur.`
	Ezekiel2517 = `The path of the righteous man is beset on all sides by the inequities of the selfish and
the tyranny of evil men. Blessed is he, who in the name of charity and good will, shepherds the weak through
the valley of darkness, for he is truly his brother's keeper and the finder of lost children. And I will strike
down upon thee with great vengeance and furious anger those who would attempt to poison and destroy my brothers.
And you will know my name is the Lord when I lay my vengeance upon thee.`

	DummyTestText = "aaaa bbb aaaa bbb cccc ddddd aaaa xxxx zzzzz fffff rrrrr eeee aaaa bbb rrrrr"
)

func TestTextFqr(t *testing.T) {
	tableTests := []struct {
		text           string
		expectedResult Words
	}{
		{
			// Lorum Impsum text - generated by MS Word command =lorum(1,10)
			text:           LorumTestText,
			expectedResult: Words{{"beef", 5}, {"dolore", 5}, {"ut", 5}, {"bone", 4}, {"eu", 4}, {"in", 4}, {"pork", 4}, {"ribs", 4}, {"sed", 4}, {"steak", 4}},
		},
		{
			// Ezekiel 25:17 Ordinary text Quote from PF movi
			text:           Ezekiel2517,
			expectedResult: Words{{"the", 10}, {"and", 7}, {"of", 6}, {"is", 4}, {"my", 3}, {"will", 3}, {"he", 2}, {"name", 2}, {"thee", 2}, {"upon", 2}},
		},
		{
			// Dummy Test
			text:           DummyTestText,
			expectedResult: Words{{"aaaa", 4}, {"bbb", 3}, {"rrrrr", 2}, {"cccc", 1}, {"ddddd", 1}, {"eeee", 1}, {"fffff", 1}, {"xxxx", 1}, {"zzzzz", 1}},
		},
		{
			// Empty string
			text:           "",
			expectedResult: nil,
		},
	}
	for _, test := range tableTests {
		if result := TextFrq(test.text); !CompareTwoSlices(test.expectedResult, result) {
			t.Error("Does not match...", test.expectedResult, result)
		}

	}
}

func TestSupplementaryFunctions–°ompareWords(t *testing.T) {

	tableTests := []struct {
		w1             Word
		w2             Word
		expectedResult bool
	}{
		{
			w1:             Word{"Test", 1},
			w2:             Word{"Test", 1},
			expectedResult: true,
		},
		{w1: Word{"Test", 2},
			w2:             Word{"Test", 1},
			expectedResult: false,
		},
		{w1: Word{"Test", 1},
			w2:             Word{"Test", 2},
			expectedResult: false,
		},
		{w1: Word{"Test", 1},
			w2:             Word{"Fest", 1},
			expectedResult: false,
		},
		{w1: Word{"Test", 1},
			w2:             Word{"Fest", 2},
			expectedResult: false,
		},
	}

	for _, test := range tableTests {

		if result := CompareWords(test.w1, test.w2); result != test.expectedResult {
			t.Error("Function CompareWords does not work for...", test.w1, test.w2, result, test.expectedResult)
		}
	}
}
func TestSupplementaryFunctionCompareTwoSlices(t *testing.T) {
	tableTests := []struct {
		s1             Words
		s2             Words
		expectedResult bool
	}{
		{
			s1:             Words{{"Test", 1}, {"Test", 1}},
			s2:             Words{{"Test", 1}, {"Test", 1}},
			expectedResult: true,
		},
		{
			s1:             Words{{"Test", 1}, {"Test", 1}},
			s2:             Words{{"Test", 1}},
			expectedResult: false,
		},
		{
			s1:             Words{{"Test", 1}, {"Test", 1}},
			s2:             Words{{"Fest", 1}, {"Test", 2}},
			expectedResult: false,
		},
		{
			s1:             Words{{"Test", 1}, {"Test", 1}},
			s2:             Words{},
			expectedResult: true,
		},
	}
	for _, test := range tableTests {

		if result := CompareTwoSlices(test.s1, test.s2); result != test.expectedResult {
			t.Error("Function CompareTwoSlices does not work for...", test.s1, test.s2, result, test.expectedResult)
		}
	}
}
func CompareWords(w1, w2 Word) bool {
	if &w1 == &w2 {
		return true
	}
	if w1.frequency != w2.frequency {
		return false
	}
	if w1.word != w2.word {
		return false
	}
	return true
}
func CompareTwoSlices(s1, s2 Words) bool {

	if len(s2) == 0 {
		return true // In case of empty string arrives as input consider the result of true to simplify the testing.
	}
	if len(s1) != len(s2) {
		return false
	}
	for i := range s1 {
		if !CompareWords(s1[i], s2[i]) {
			return false
		}
	}
	return true
}
